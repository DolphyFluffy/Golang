package main

import (
	"html/template" // html/template pacakge helps quanrentee only correct looking HTML is generated by template actions
	"io/ioutil"
	"log"
	"net/http"
)

// Describes how page data will be stored in memory
type Page struct {
	Title string
	Body  []byte // This type means a byte slice - this si the type expected by the io libraries
}

// save() is a method w/o params that takes a reciever p (pointer to a page) and returns a value of type error
// Saves the page's body to a text file
func (p *Page) save() error {
	filename := p.Title + ".txt"

	return ioutil.WriteFile(filename, p.Body, 0600) // WriteFile returns an error or nil (if no error)
} // 0600 means the file has read/write permissions for currnet user only

// loadPage cnstructs the file name from the title, reads file contents into the body and returns a pointer
// to a page literal with the title and body
func loadPage(title string) (*Page, error) {
	filename := title + ".txt"
	body, err := ioutil.ReadFile(filename)

	if err != nil {
		return nil, err
	}

	return &Page{Title: title, Body: body}, nil
}

func renderTemplate(w http.ResponseWriter, tmpl string, p *Page) {
	t, _ := template.ParseFiles(tmpl + ".html") // Reads contents of edit.html file and returns a pointer to template
	t.Execute(w, p)                             // This executes the templates, writing the html to the http.ResponseWriter
}

// viewHandler allows ysers to view a wiki page
func viewHandler(w http.ResponseWriter, r *http.Request) {
	title := r.URL.Path[len("/view/"):] // Extracts the URL after the static '/view/' path
	p, err := loadPage(title)           // Loads page with the title in the url and writes to w http.ResponseWriter

	if err != nil {
		http.Redirect(w, r, "/edit/"+title, http.StatusFound) // adds status code of 302 and a location header to http response
		return
	}

	renderTemplate(w, "view", p)
}

// editHander loads the page if it exist/cretes an empty it id doesnt and displays and html form
func editHandler(w http.ResponseWriter, r *http.Request) {
	title := r.URL.Path[len("/edit/"):]
	p, err := loadPage(title)

	if err != nil {
		p = &Page{Title: title}
	}

	renderTemplate(w, "edit", p)
}

// saveHandler handles submission of forms located on the edit pages
func saveHandler(w http.ResponseWriter, r *http.Request) {
	title := r.URL.Path[len("/save/"):]
	body := r.FormValue("body")
	p := &Page{Title: title, Body: []byte(body)} // []byte(body) converts the string to a slice of bytes
	p.save()                                     // This writes the data in the form to the file
	http.Redirect(w, r, "/view/"+title, http.StatusFound)
}

func main() {
	http.HandleFunc("/view/", viewHandler) // Tells http package to handle request with '/view/' root with this func
	http.HandleFunc("/edit/", editHandler)
	http.HandleFunc("/save/", saveHandler)
	log.Fatal(http.ListenAndServe(":8080", nil)) // Listens on port 8080 until an error occurs or termination
}
